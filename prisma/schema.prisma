// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Pet         Pet[]
    PetView     PetView[]
    UserProfile UserProfile[]

    Wallet Wallet[]
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserProfile {
    id String @id @default(cuid())

    birthdate DateTime
    phone     String

    address   Address @relation(fields: [addressId], references: [id])
    addressId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Address {
    id String @id @default(cuid())

    cep         String
    numero      String
    complemento String

    UserProfile UserProfile[]
}

model Pet {
    id String @id @default(cuid())

    name            String
    breed           PetBreed @relation(fields: [petBreedId], references: [id])
    birthdate       DateTime
    vaccinationCard String

    photo String?

    description String @db.Text
    petBreedId  String

    announce Boolean @default(false)

    owner   User      @relation(fields: [ownerId], references: [id])
    ownerId String
    PetView PetView[]
}

model PetBreed {
    id String @id @default(cuid())

    name String
    Pet  Pet[]
}

model PetView {
    id String @id @default(cuid())

    user     User @relation(fields: [userId], references: [id])
    pet      Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)
    quantity Int  @default(0)

    like     Boolean  @default(false)
    lastSeen DateTime @updatedAt

    petId  String
    userId String

    @@unique([petId, userId])
}

model Wallet {
    id String @id @default(cuid())

    leskoins Int @default(0)

    user   User   @relation(fields: [userId], references: [id])
    userId String
}
